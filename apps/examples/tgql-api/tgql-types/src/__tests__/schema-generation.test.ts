import { describe, it, expect } from 'vitest';
import { existsSync, readFileSync } from 'node:fs';
import { join, resolve, dirname } from 'node:path';
import { fileURLToPath } from 'node:url';

// Get the directory of this test file
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

describe('TGQL Schema Generation', () => {
  it('should verify existing generated files', () => {
    // Instead of regenerating, verify that the existing generated files are correct
    const generatedDir = resolve(__dirname, '../../generated');
    const schemaDir = join(generatedDir, 'schema');
    const typesDir = join(generatedDir, 'types');
    
    // Check that the generated directory structure exists
    expect(existsSync(generatedDir)).toBe(true);
    expect(existsSync(schemaDir)).toBe(true);
    expect(existsSync(typesDir)).toBe(true);
    
    // Check for individual sector schema files
    const sessionSchemaFile = join(schemaDir, 'session.graphql');
    const userSchemaFile = join(schemaDir, 'user.graphql');
    
    expect(existsSync(sessionSchemaFile)).toBe(true);
    expect(existsSync(userSchemaFile)).toBe(true);
    
    // Verify schema files contain expected content
    const sessionSchemaContent = readFileSync(sessionSchemaFile, 'utf-8');
    const userSchemaContent = readFileSync(userSchemaFile, 'utf-8');
    
    expect(sessionSchemaContent).toContain('type Session');
    expect(userSchemaContent).toContain('type User');
    
    // Check type files
    const typesIndexFile = join(typesDir, 'index.ts');
    const userTypesFile = join(typesDir, 'user.types.ts');
    const sessionTypesFile = join(typesDir, 'session.types.ts');
    
    expect(existsSync(typesIndexFile)).toBe(true);
    expect(existsSync(userTypesFile)).toBe(true);
    expect(existsSync(sessionTypesFile)).toBe(true);
    
    // Verify type files contain expected content
    const typesIndexContent = readFileSync(typesIndexFile, 'utf-8');
    const userTypesContent = readFileSync(userTypesFile, 'utf-8');
    const sessionTypesContent = readFileSync(sessionTypesFile, 'utf-8');
    
    // The types/index.ts is generated by graphql-codegen, check for GraphQL types
    expect(typesIndexContent).toContain('export type Session');
    expect(typesIndexContent).toContain('export type User');
    expect(typesIndexContent).toContain('export type Query');
    expect(typesIndexContent).toContain('export type Mutation');
    
    // The individual type files should contain our custom types
    expect(userTypesContent).toContain('export interface User');
    expect(sessionTypesContent).toContain('export interface Session');
  });

  it('should verify user types were generated correctly', () => {
    // Check that user types were generated correctly
    const userTypesFile = resolve(__dirname, '../../generated/types/user.types.ts');
    
    expect(existsSync(userTypesFile)).toBe(true);
    
    const content = readFileSync(userTypesFile, 'utf-8');
    expect(content).toContain('export interface User');
    expect(content).toContain('allUsersQuery');
    expect(content).toContain('addUserMutation');
  });

  it('should verify session types were generated correctly', () => {
    // Check that session types were generated correctly
    const sessionTypesFile = resolve(__dirname, '../../generated/types/session.types.ts');
    
    expect(existsSync(sessionTypesFile)).toBe(true);
    
    const content = readFileSync(sessionTypesFile, 'utf-8');
    expect(content).toContain('export interface Session');
  });
});