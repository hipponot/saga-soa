import { z } from 'zod';
import { zodToTs, createTypeAlias, printNode } from 'zod-to-ts';
import { TypeGenerationError } from './types.js';

export interface TypeGeneratorOptions {
  name?: string;
  typePrefix?: string;
  includeUtils?: boolean;
}

export class TypeGenerator {
  generateType(schema: z.ZodSchema, typeName: string, options: TypeGeneratorOptions = {}): string {
    try {
      const { node } = zodToTs(schema, typeName);
      const typeAlias = createTypeAlias(node, typeName);
      const typeDefinition = printNode(typeAlias);

      return this.formatTypeDefinition(typeDefinition, typeName);
    } catch (error) {
      throw new TypeGenerationError(
        `Failed to generate type for ${typeName}: ${error instanceof Error ? error.message : String(error)}`
      );
    }
  }

  private formatTypeDefinition(typeDefinition: string, typeName: string): string {
    return `// Generated by zod2ts using zod-to-ts
// Do not edit manually

${typeDefinition}
`;
  }
}
